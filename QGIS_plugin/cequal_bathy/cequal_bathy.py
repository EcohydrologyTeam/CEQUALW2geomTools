# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CEQUAL_Bathy
                                 A QGIS plugin
 Tools to develope shapefiles defining river network and generate bathymetry input files
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-04
        git sha              : $Format:%H$
        copyright            : (C) 2021 by LimnoTech
        email                : drucinski@limno.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import *
from qgis.PyQt.QtWidgets import *

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .cequal_bathy_dialog import CEQUAL_BathyDialog
from .create_poly_dialog import Create_polyDialog
from .merge_poly_dialog import Merge_polyDialog
import os.path
from .create_poly import createPolygon_func
from .convex_check import convexCheck_func
from .centerline_check import centerlineCheck_func
from .symbology_check import symbologyCheck_func

from qgis.core import *


class CEQUAL_Bathy:
    """QGIS Plugin Implementation."""

    createPolygon_btn = createPolygon_func
    convexCheck = convexCheck_func
    centerlineCheck = centerlineCheck_func
    symbologyCheck = symbologyCheck_func

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CEQUAL_Bathy_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CE QUAL W2 Bathymetry PreProcessor')

        self.dlgCreate = Create_polyDialog()
        self.dlgMerge = Merge_polyDialog()
        
        
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CEQUAL_Bathy', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        
        # Add toolbar 
        self.toolbar = self.iface.addToolBar("CE QUAL Bathy")
        
        # Create actions 
        self.createact = QAction(QIcon(":/plugins/cequal_bathy/create_icon.png"),
                               QCoreApplication.translate("CEQUAL_Bathy", "Create W2 Segments"),
                               self.iface.mainWindow())
                               
        self.splitact = QAction(QIcon(":/plugins/cequal_bathy/split_icon.png"),
                               QCoreApplication.translate("CEQUAL_Bathy", "Split W2 Segment"),
                               self.iface.mainWindow())
                               
        self.mergeact = QAction(QIcon(":/plugins/cequal_bathy/merge_icon.png"),
                               QCoreApplication.translate("CEQUAL_Bathy", "Merge W2 Segments"),
                               self.iface.mainWindow())

        # Connect action signals to slots
        self.createact.triggered.connect(self.doCreatePoly)
        self.splitact.triggered.connect(self.doSplitPoly)
        self.mergeact.triggered.connect(self.doMergePoly)

        # Add actions to the toolbar
        self.toolbar.addAction(self.createact)
        self.toolbar.addAction(self.splitact)
        self.toolbar.addAction(self.mergeact)

        
        
        
        icon_path = ':/plugins/cequal_bathy/river_icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'CE QUAL W2'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True
        
    def unload(self):
        # remove toolbar on plugin unload
        del self.toolbar
        
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CE Qual W2 Bathymetry PreProcessor'),
                action)
            self.iface.removeToolBarIcon(action)

#centerlineCheck was here
#convexCheck was here
#createPolygon_btn was here


    def doCreatePoly(self):
        #TODO  Find width to use to transect extension
        #TODO  Combine results into existing shapefile (make a copy)

        import processing
        root = QgsProject.instance().layerTreeRoot()

        #Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()

        #Clear the contents of the comboBox from previous runs
        self.dlgCreate.comboBox.clear()

        #Populate the comboBox with names of all the loaded layers
        self.dlgCreate.comboBox.addItems([layer.name() for layer in layers])

        selectedLayerIndex = self.dlgCreate.comboBox.currentIndex()
        selectedLayer = layers[selectedLayerIndex].layer()

        #show dialog
        self.dlgCreate.show()

        #number of segments
        seg_ct = int(self.dlgCreate.spinBox.value())

        #transect width
        transectWidth = float(self.dlgCreate.doubleSpinBox.value())

        #Run the create polygon routine by clicking the button
        #self.dlgCreate.pushButton.clicked.connect(lambda: self.createPolygon_btn(selectedLayer, seg_ct, extendWidth))
        self.dlgCreate.pushButton.clicked.connect(lambda: self.createPolygon_btn(selectedLayer, self.dlgCreate.spinBox.value(), self.dlgCreate.doubleSpinBox.value()))






    def doSplitPoly(self):
        #TODO:  UI to specify centerline, width

        import processing
        root = QgsProject.instance().layerTreeRoot()

        #segment width
        seg_w=150

        #get active layer
        iface = self.iface
        alyr=iface.activeLayer()

        #TODO Dissolve river centerline to ensure one line segment

        #extract river centerline segment overlapping selected polygon
        params={ 'INPUT' : 'G:/2ERDC02/GIS/Demo_Files_31Mar2021/NapaRiver_CL.shp', 'OUTPUT' : 'TEMPORARY_OUTPUT', 'OVERLAY' : QgsProcessingFeatureSourceDefinition(alyr.id(), True) }
        result_cl = processing.run("native:clip", params)
        result_layer_cl = result_cl['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_cl)

        #Get length and mid point of selected segment
        params = { 'CALC_METHOD' : 0, 'INPUT' : result_layer_cl, 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_len = processing.run("qgis:exportaddgeometrycolumns", params)
        result_layer1 = result_len['OUTPUT']
        len=0
        for feature in result_layer1.getFeatures():
            len += feature["length"]
        mid=len/2

        #Get points with angle
        params = { 'DISTANCE' : mid, 'END_OFFSET' : 0, 'INPUT' : result_layer_cl, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'START_OFFSET' : 0 }
        result_pts = processing.run("native:pointsalonglines", params)
        result_layer_pts = result_pts['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_pts)

        #select only midpoint
        params={ 'INPUT' : result_layer_pts, 'INTERSECT' : QgsProcessingFeatureSourceDefinition(alyr.id(), True), 'OUTPUT' : 'TEMPORARY_OUTPUT', 'PREDICATE' : [6] }
        result_pts1 = processing.run("native:extractbylocation", params)
        result_layer_pts1 = result_pts1['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_pts1)

        #get id of segment to be split
        params={ 'DISCARD_NONMATCHING' : False, 'INPUT' : result_layer_pts1, 'JOIN' : QgsProcessingFeatureSourceDefinition(alyr.id(), False), 'JOIN_FIELDS' : ['order_id'], 'METHOD' : 2, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'PREDICATE' : [0,1,5], 'PREFIX' : '' }
        result_pts2 = processing.run("native:joinattributesbylocation", params)
        result_layer_pts2 = result_pts2['OUTPUT']
        #adjust order_id
        params={ 'FIELD_LENGTH' : 0, 'FIELD_NAME' : 'order_id', 'FIELD_PRECISION' : 0, 'FIELD_TYPE' : 1, 'FORMULA' : ' \"order_id\" +1', 'INPUT' : result_layer_pts2, 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_pts3 = processing.run("native:fieldcalculator", params)
        result_layer_pts3 = result_pts3['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_pts3)
        for feature in result_layer_pts3.getFeatures():
            seg_id = feature["order_id"]


        #intersect lines and existing polygons
        params={ 'INPUT' : 'G:/2ERDC02/GIS/Demo_Files_31Mar2021/NapaRiver_CL.shp', 'INPUT_FIELDS' : [], 'OUTPUT' : 'TEMPORARY_OUTPUT', 'OVERLAY' : QgsProcessingFeatureSourceDefinition(alyr.id(), False), 'OVERLAY_FIELDS' : [], 'OVERLAY_FIELDS_PREFIX' : '' }
        result_int = processing.run("native:intersection", params)
        result_layer_int = result_int['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_int)

        #extract vertices
        params={ 'INPUT' : result_layer_int, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'VERTICES' : '0' }
        result_vert = processing.run("native:extractspecificvertices", params)
        result_layer_vert = result_vert['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_vert)

        #adjust order_id
        params={ 'FIELD_LENGTH' : 0, 'FIELD_NAME' : 'order_id', 'FIELD_PRECISION' : 0, 'FIELD_TYPE' : 1, 'FORMULA' : 'case \r\nwhen \"order_id\" >= ' +str(seg_id) + 'then \"order_id\" +1\r\nelse \"order_id\" \r\nend', 'INPUT' : result_layer_vert, 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_vert = processing.run("native:fieldcalculator", params)
        result_layer_vert = result_vert['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_vert)


        #add new point to existing points
        params={ 'CRS' : None, 'LAYERS' : [result_layer_vert,result_layer_pts3], 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_mpts = processing.run("native:mergevectorlayers", params)
        result_layer_mpts = result_mpts['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_mpts)

        #Extend and rotate lines
        params ={ 'EXPRESSION' : 'extend(\r\n make_line(\r\n $geometry,\r\n project (\r\n $geometry, \r\n 150, \r\n radians(\"angle\"-90))\r\n ),\r\n 150,\r\n 0\r\n)', 'INPUT' : result_layer_mpts, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'OUTPUT_GEOMETRY' : 1, 'WITH_M' : False, 'WITH_Z' : False }
        result_rot = processing.run("native:geometrybyexpression", params)
        result_layer_rot = result_rot['OUTPUT']
        #remove existing Transects Layer
        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == "Transects":
                QgsProject.instance().removeMapLayers([lyr.id()])
        result_layer_rot.setName("Transects")
        QgsProject.instance().addMapLayer(result_layer_rot)

        #Get starting points
        params = { 'INPUT' : result_layer_rot, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'VERTICES' : '0' }
        result_sp = processing.run("native:extractspecificvertices", params)
        result_layer_sp = result_sp['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_sp)

        #Get end points
        params = { 'INPUT' : result_layer_rot, 'OUTPUT' : 'TEMPORARY_OUTPUT', 'VERTICES' : '-1' }
        result_ep = processing.run("native:extractspecificvertices", params)
        result_layer_ep = result_ep['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_ep)

        #connect paths
        params = { 'CLOSE_PATH' : False, 'GROUP_EXPRESSION' : '', 'INPUT' : result_layer_sp, 'NATURAL_SORT' : False, 'ORDER_EXPRESSION' : '\"order_id\"', 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_p1 = processing.run("native:pointstopath", params)
        result_layer_p1 = result_p1['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_p1)

        params = { 'CLOSE_PATH' : False, 'GROUP_EXPRESSION' : '', 'INPUT' : result_layer_ep, 'NATURAL_SORT' : False, 'ORDER_EXPRESSION' : '\"order_id\"', 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_p2 = processing.run("native:pointstopath", params)
        result_layer_p2 = result_p2['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_p2)

        #merge paths
        params={ 'CRS' : None, 'LAYERS' : [result_layer_rot,result_layer_p1,result_layer_p2], 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_lines = processing.run("native:mergevectorlayers", params)
        result_layer_lines = result_lines['OUTPUT']
        #QgsProject.instance().addMapLayer(result_layer_lines)

        #polygonize
        { 'INPUT' : result_layer_lines, 'KEEP_FIELDS' : True, 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        params={ 'INPUT' : result_layer_lines, 'KEEP_FIELDS' : True, 'OUTPUT' : 'TEMPORARY_OUTPUT' }
        result_poly = processing.run("native:polygonize", params)
        result_layer_poly = result_poly['OUTPUT']

        #get new order_ids

        for lyr in QgsProject.instance().mapLayers().values():
            if lyr.name() == "Segments":
                QgsProject.instance().removeMapLayers([lyr.id()])
        result_layer_poly.setName("Segments")
        QgsProject.instance().addMapLayer(result_layer_poly)






        
    def doMergePoly(self):
        # slot for action
        self.dlgMerge.show()
        
    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = CEQUAL_BathyDialog()

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
